// SoftimageGLTF IO
// Initial code generated by Softimage SDK Wizard
// Executed Mon Jun 13 15:34:29 UTC+0500 2022 by Shekn
// 
// Tip: You need to compile the generated code before you can load the plug-in.
// After you compile the plug-in, you can load it by clicking Update All in the Plugin Manager.
#include <xsi_application.h>
#include <xsi_context.h>
#include <xsi_pluginregistrar.h>
#include <xsi_status.h>
#include <xsi_command.h>
#include <xsi_argument.h>
#include <xsi_selection.h>

#include "gltf_io/export.h"
#define STB_IMAGE_IMPLEMENTATION
#define STB_IMAGE_WRITE_IMPLEMENTATION
#define TINYGLTF_IMPLEMENTATION
#include "utilities/utilities.h"
#include "gltf_io/import.h"

SICALLBACK XSILoadPlugin(XSI::PluginRegistrar& in_reg)
{
	in_reg.PutAuthor("Shekn");
	in_reg.PutName("SoftimageGLTF IO");
	in_reg.PutVersion(1, 0);
	//RegistrationInsertionPoint - do not remove this line
	in_reg.RegisterCommand("GLTFImport", "GLTFImport");
	in_reg.RegisterCommand("GLTFExport", "GLTFExport");

	return XSI::CStatus::OK;
}

SICALLBACK XSIUnloadPlugin(const XSI::PluginRegistrar& in_reg)
{
	XSI::CString str_plugin_name;
	str_plugin_name = in_reg.GetName();
	XSI::Application().LogMessage(str_plugin_name + " has been unloaded.", XSI::siVerboseMsg);
	return XSI::CStatus::OK;
}

SICALLBACK GLTFImport_Init(XSI::CRef& in_ctxt)
{
	XSI::Context ctxt(in_ctxt);
	XSI::Command cmd;
	cmd = ctxt.GetSource();
	cmd.PutDescription("Import *.gltf file to the scene");
	cmd.SetFlag(XSI::siNoLogging, false);

	XSI::ArgumentArray args;
	args = cmd.GetArguments();
	args.Add("file_path");
	// mesh attributes
	args.Add("import_normals", true);
	args.Add("import_uvs", true);
	args.Add("import_colors", true);
	args.Add("import_shapes", true);
	args.Add("import_skin", true);
	//scene
	args.Add("import_materials", true);
	args.Add("import_cameras", true);
	args.Add("import_animations", false);

	return XSI::CStatus::OK;
}

SICALLBACK GLTFImport_Execute(XSI::CRef& in_ctxt)
{
	XSI::Context ctxt(in_ctxt);
	XSI::CValueArray args = ctxt.GetAttribute("Arguments");

	//extract input arguments
	XSI::CString file_path = args[0];
	bool import_normals = args[1];
	bool import_uvs = args[2];
	bool import_colors = args[3];
	bool import_shapes = args[4];
	bool import_skin = args[5];

	bool import_materials = args[6];
	bool import_cameras = args[7];
	bool import_animations = args[8];

	if (file_path.Length() > 0 && is_file_exists(file_path))
	{
		import_gltf(file_path, 
			import_normals,
			import_uvs,
			import_colors,
			import_shapes,
			import_skin,
			import_materials,
			import_cameras,
			import_animations);
	}
	else
	{
		log_message("To import GLTF/GLB select an existing file", XSI::siWarningMsg);
	}
	
	return XSI::CStatus::OK;
}

SICALLBACK GLTFExport_Init(XSI::CRef& in_ctxt)
{
	XSI::Context ctxt(in_ctxt);
	XSI::Command cmd;
	cmd = ctxt.GetSource();
	cmd.PutDescription("Export scene to the *.gltf file");
	cmd.SetFlag(XSI::siNoLogging, false);

	XSI::ArgumentArray args;
	args = cmd.GetArguments();
	XSI::CValueArray empty_array(0);
	args.Add("objects", empty_array);
	args.Add("file_path");
	
	return XSI::CStatus::OK;
}

SICALLBACK GLTFExport_Execute(XSI::CRef& in_ctxt)
{
	XSI::Context ctxt(in_ctxt);
	XSI::CValueArray args = ctxt.GetAttribute("Arguments");

	//extract input arguments
	XSI::CString file_path = args[0];

	if (true || file_path.Length() > 0)
	{
		XSI::Selection selection = XSI::Application().GetSelection();
		XSI::CRefArray objects = selection.GetArray();
		export_gltf("D:\\Graphic\\For Softimage\\Projects\\Softimage GLTF\\Models\\export\\exported_model.gltf", objects);
	}
	else
	{
		log_message("To export scene to GLTF/GLB file select a valid file path", XSI::siWarningMsg);
	}

	return XSI::CStatus::OK;
}

